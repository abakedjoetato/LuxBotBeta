Build a complete Discord bot in Python 3.12 using the newest discord.py (v2.x) library with full slash-command + interaction support.

Purpose:
A TikTok-style music review queue system.

Key Requirements:

1. Submission
   • Command: /submit opens a discord.ui.Modal (form) with required fields:
       – Artist Name (text)
       – Song Name (text)
       – Link or MP3 file (must accept either a valid URL or an uploaded .mp3)
   • Validate all fields before accepting.
   • Store submission with user ID, artist name, song name, and link/file reference in a persistent database (SQLite or JSON).

2. Queue Lines & Channels
   • Four lines: BackToBack, DoubleSkip, Skip, Free.
   • Each line corresponds to a Discord text channel settable by an admin command (/setline line channel).
   • Each line’s channel always shows ONE pinned embed message that lists every submission in that line as:
        “**UserName** – *Artist Name – Song Name* (link if provided)”
   • The embed must auto-update instantly whenever a track is added, removed, or moved.
   • Members can only submit to the Free line and can have only ONE active submission in Free.
   • They may have multiple submissions in other lines.

3. User Commands
   • /myqueue – shows only that user’s active submissions across all lines.
   • /submit – opens the modal form above.
   • /help – describes commands.

4. Admin Commands (role check: Manage Server or custom role)
   • /move [submission_id] [target_line] – move a submission between lines.
   • /remove [submission_id] – remove a submission.
   • /next – returns the next submission to review, following weighted order:
        BackToBack → DoubleSkip → Skip → Free.
     Sends the details in an embed to a configurable “NowPlaying” channel and DMs the admin who used the command.
   • /setline [line] [#channel] – set which Discord channel represents each line.

5. Queue Logic
   • Priority: must fully drain higher-priority lines before moving to the next.
   • Real-time concurrency safe (asyncio locks) so updates don’t collide.

6. Implementation Details
   • Use discord.ui.Modal and discord.ui.View for all interactive forms and admin controls.
   • Organize code into cogs: queue_cog.py, admin_cog.py, submission_cog.py.
   • Provide requirements.txt with discord.py>=2.3.2.
   • Include a README explaining setup (bot token env var, running on Replit).

Deliverable:
Generate all Python files with clear comments and docstrings, ready to run on Replit without needing further clarification.